import { BadRequestException, Injectable } from '@nestjs/common';
import { CreateEnterpriseDto } from './dto/create-enterprise.dto';
import { UpdateEnterpriseDto } from './dto/update-enterprise.dto';
import { PaginationDto } from 'src/common/dto/pagination.interface';
import { GlobalFunctions } from 'src/common/functions/global-function';
import { PrismaService } from 'src/prisma.service';
import { ResponseScheme } from 'src/common/interfaces/response.interface';
import * as fs from 'fs';
import * as path from 'path';

@Injectable()
export class EnterpriseService {
  constructor(
    private readonly globalFunctions: GlobalFunctions,
    private prisma: PrismaService,
  ) { }
  private resp: ResponseScheme = {
    error: false,
    message: '',
    statusCode: 200,
    data: {},
  };

  async create(createEnterpriseDto: CreateEnterpriseDto, file: Express.Multer.File) {
    try {
      this.resp.data = {};
      this.resp.error = false;
      this.resp.statusCode = 200;

      const { name, ruc } = createEnterpriseDto;

      // Guardar la imagen en el servidor
      const uploadFolderPath = path.join(__dirname, '..', '..', 'uploads', 'enterprises');
      const fileName = `${Date.now()}-${file.originalname}`;
      const filePath = path.join(uploadFolderPath, fileName);

      // Asegurarse de que la carpeta de destino exista
      if (!fs.existsSync(uploadFolderPath)) {
        fs.mkdirSync(uploadFolderPath, { recursive: true });
      }

      // Escribir el archivo en el sistema
      fs.writeFileSync(filePath, file.buffer);

      // Guardar solo el nombre del archivo en la base de datos
      const data = await this.prisma.enterprise.create({
        data: {
          name,
          ruc,
          url_image: fileName, // Guardamos solo el nombre del archivo
        },
        select: {
          id: true,
          name: true,
          ruc: true,
          url_image: true,
        },
      });

      this.resp.message = 'Empresa creada con éxito';
      this.resp.data = data;
    } catch (e) {
      this.resp.error = true;
      this.resp.statusCode = 500;
      this.resp.message = JSON.stringify(e);
    }

    return this.resp;
  }
}


///////////////////////////////////////////////////////

import {
  Controller,
  Post,
  Body,
  UploadedFile,
  UseInterceptors,
} from '@nestjs/common';
import { EnterpriseService } from './enterprise.service';
import { FileInterceptor } from '@nestjs/platform-express';
import { CreateEnterpriseDto } from './dto/create-enterprise.dto';

@Controller('enterprise')
export class EnterpriseController {
  constructor(private readonly enterpriseService: EnterpriseService) {}

  @Post()
  @UseInterceptors(FileInterceptor('file')) // Intercepta el archivo enviado en form-data
  async create(
    @UploadedFile() file: Express.Multer.File, // Recibe el archivo cargado
    @Body() createEnterpriseDto: CreateEnterpriseDto, // Recibe el resto de los datos
  ) {
    return this.enterpriseService.create(createEnterpriseDto, file); // Pasa el archivo al servicio
  }
}

////////////////////////////////////////////////////////////

import { NestFactory } from '@nestjs/core';
import { AppModule } from './app.module';
import { join } from 'path';
import { NestExpressApplication } from '@nestjs/platform-express';

async function bootstrap() {
  const app = await NestFactory.create<NestExpressApplication>(AppModule);

  // Servir la carpeta uploads de forma pública
  app.useStaticAssets(join(__dirname, '..', 'uploads'), {
    prefix: '/uploads/',
  });

  await app.listen(3000);
}
bootstrap();


////////////////////////////////////////////////////////////////

linea77 index empresas
            <div class="card_img">
              <img :src="item.url_image ? `${apiurl}/uploads/enterprises/${item.url_image}` : sideImg" :alt="'imagen_project_' + index"/>
            </div>

///////////////////////////////////////////////////////////////////
import { Injectable, Inject, Req } from '@nestjs/common';
import { CreateEnterpriseDto } from './dto/create-enterprise.dto';
import { PrismaService } from 'src/prisma.service';
import * as fs from 'fs';
import * as path from 'path';

@Injectable()
export class EnterpriseService {
  constructor(private prisma: PrismaService) {}

  async create(createEnterpriseDto: CreateEnterpriseDto, file: Express.Multer.File, req: any) {
    try {
      const { name, ruc } = createEnterpriseDto;

      // Guardar la imagen en el servidor
      const uploadFolderPath = path.join(__dirname, '..', '..', 'uploads', 'enterprises');
      const fileName = `${Date.now()}-${file.originalname}`;
      const filePath = path.join(uploadFolderPath, fileName);

      // Asegurarse de que la carpeta de destino exista
      if (!fs.existsSync(uploadFolderPath)) {
        fs.mkdirSync(uploadFolderPath, { recursive: true });
      }

      // Escribir el archivo en el sistema
      fs.writeFileSync(filePath, file.buffer);

      // Generar la URL completa
      const baseUrl = `${req.protocol}://${req.get('host')}`; // Ejemplo: http://localhost:4500
      const imageUrl = `${baseUrl}/uploads/enterprises/${fileName}`; // URL completa de la imagen

      // Guardar en la base de datos
      const data = await this.prisma.enterprise.create({
        data: {
          name,
          ruc,
          url_image: imageUrl, // Guardar la URL completa en lugar del nombre del archivo
        },
        select: {
          id: true,
          name: true,
          ruc: true,
          url_image: true,
        },
      });

      return {
        error: false,
        message: 'Empresa creada con éxito',
        statusCode: 200,
        data,
      };
    } catch (e) {
      return {
        error: true,
        message: JSON.stringify(e),
        statusCode: 500,
        data: {},
      };
    }
  }
}